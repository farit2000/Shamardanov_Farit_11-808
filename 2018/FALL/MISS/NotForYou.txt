//using System.Collections.Generic;

//namespace TableParser
//{
//    public class FieldsParserTask
//    {
//        // При решении этой задаче постарайтесь избежать создания методов, длиннее 10 строк.
//        // Ниже есть метод ReadField — это подсказка. Найдите класс Token и изучите его.
//        // Подумайте как можно использовать ReadField и Token в этой задаче.
//        public static List<string> ParseLine(string line)
//        {
//            return new List<string> { line }; // сокращенный синтаксис для инициализации коллекции.
//        }
//        public static string GetField(string line)
//        {
//            string nowField = "";
//            for (int i = 0; i < line.Length; i++)
//            {
//                if (char.IsLetter(line[i]) == true)
//                {

//                    return SimpleFields()
//                }
//            }
//            return nowField;
//        }
//        public static string SimpleFields(string line)
//        {

//        }

//        public static string SimpleFields(string line)
//        {

//        }

//        private static Token ReadField(string line, int startIndex)
//        {
//            return new Token(line, 0, line.Length);
//        }
//    }
//}
using System.Collections.Generic;

namespace TableParser
{
    public class FieldsParserTask
    {
        // При решении этой задаче постарайтесь избежать создания методов, длиннее 10 строк. 
        // Ниже есть метод ReadField — это подсказка. Найдите класс Token и изучите его. 
        // Подумайте как можно использовать ReadField и Token в этой задаче. 
        public static List<string> ParseLine(string line)
        {
            var newline = new List<string>();
            // Пустое поле 
            if (line.Replace(" ", string.Empty) == string.Empty)
                newline = GetEmptyField(line);
            // Простое поле 
            if (!line.Contains("\"") && !line.Contains("\'"))
                newline = GetSimplefield(line);
            // Поле с кавычками 
            else
                newline = GetQuotedField(line);
            return newline;
        }
        // чтение полей в токен 
        private static Token ReadField(string line, int startIndex)
        {
            return new Token(line, 0, line.Length);
        }
        // получение пустого поля 
        public static List<string> GetEmptyField(string line)
        {
            return new List<string> { };
        }
        // получение простого поля 
        public static List<string> GetSimplefield(string line)
        {
            var list = new List<string>();
            var fields = line.Split();
            foreach (var field in fields)
                list.Add(field);
            return list;
        }
       // получение поля с кавычками
        public static List<string> GetQuotedField(string line)
        {
            int nextIndex = 0;
            var list = new List<string>();
            var token = new Token(line, 0, line.Length);
            var fields = line.Split();
            int i = 0;
            for (i = nextIndex; i < line.Length; i++)
            {
                if((line[i] == '"'))
                {
                    int j = 0;
                    int startIndex = i + 1;
                    int lenght = 0;
                    while((line[j] != '"'))
                    {
                        lenght++;
                        j++;
                    }
                    nextIndex = startIndex + lenght;
                    list.Add(line.Substring(startIndex, lenght));
                }
                if ((line[i] == '\''))
                {
                    int j = 0;
                    int startIndex = i + 1;
                    int lenght = 0;
                    while ((line[j] != '\'') && (line[j-1] != '\\'))
                    {
                        lenght++;
                        j++;
                    }
                    nextIndex = startIndex + lenght;
                    list.Add(line.Substring(startIndex, lenght));
                } 
            }
            return list;
        }
    }
}
